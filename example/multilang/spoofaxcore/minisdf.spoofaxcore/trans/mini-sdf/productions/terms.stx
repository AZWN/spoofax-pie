module mini-sdf/productions/terms

imports
  signatures/mini-sdf/mini-sdf-sig
  cons-type-interface/types
  cons-type-interface/sorts

rules

  // Filter away Terminals, since they do not have a sort
  // (and hence don't need type-checking, or a position in the constructor signature)
  prodTerms: list(ProdTerm) -> list(ProdTerm)
  prodTerms([]) = [].
  prodTerms([Terminal(_) | tl]) = prodTerms(tl).
  prodTerms([s@SortTerm(_) | tl]) = [s | prodTerms(tl)].

rules

  typeOfTerms maps typeOfTerm(*, list(*)) = list(*)

  typeOfTerm: scope * ProdTerm -> TYPE
  typeOfTerm(s_root, SortTerm(t)) = typeOfSortTerm(s_root, t).

rules

  typeOfSortTerm : scope * SortTerm -> TYPE

  typeOfSortTerm(s, Plus(t)) 					= TITER(typeOfSortTerm(s, t)).
  typeOfSortTerm(s, Option(t)) 					= TOPT(typeOfSortTerm(s, t)).
  typeOfSortTerm(s, IterStar(t)) 				= TSTAR(typeOfSortTerm(s, t)).
  typeOfSortTerm(s, Ref(SortRef(n)))	= typeOfSort(s, n).
