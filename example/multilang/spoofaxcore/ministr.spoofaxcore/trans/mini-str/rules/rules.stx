module mini-str/rules/rules

imports
  cons-type-interface/types
  cons-type-interface/labels
  cons-type-interface/sorts

  signatures/mini-str/mini-str-sig
  mini-str/rules/variables
  mini-str/rules/resolution
  mini-str/rules/patterns/match
  mini-str/rules/patterns/build

rules

  rulesOk maps ruleOk(*, list(*))

  ruleOk: scope * RuleDef
  ruleOk(s_root, RewriteRuleDef(n, m, b, w)) :-
    {s_match s_build s_with T1 T2}
      new s_match s_build s_with,
      s_match -P-> s_root,
      s_build -P-> s_with,
      withOk(s_match, s_with, w),
      typeOfMatch(s_match, m) == T1,
      typeOfBuild(s_build, b) == T2,
      declareRule(s_root, n, T1, T2).

rules

  withOk: scope * scope * With

  withOk(s_match, s_build, NoWith()) :-
    s_build -P-> s_match.

  withOk(s_match, s_build, With(str)) :-
    strategyOk(s_match, s_build, str).

rules

  strategyOk : scope * scope * Strategy

  strategyOk (s_match, s_decl, Assign(n, p)) :- {T}
    s_decl -P-> s_match,
    typeOfBuild(s_match, p) == T,
    declareVar(s_decl, n, T).

  strategyOk(s_match, s_build, Seq(str1, str2)) :- {s_int}
    new s_int,
    strategyOk(s_match, s_int, str1),
    strategyOk(s_int, s_build, str2).
