module mini-str/rules/resolution

imports
  cons-type-interface/sorts
  cons-type-interface/labels

signature

  sorts RTYPE constructors
    // Rule type: input sort -> output sort
    RULE : TYPE * TYPE -> RTYPE

  namespaces
    RuleInst : string 	// Declaration of single rewrite rule
    Rule : string  		// Module-unique declaration of rule

  name-resolution
    resolve RuleInst
      filter e // Only find rule instances in same module
    
    resolve Rule
      filter P* I*
      min $ < P, $ < I, P < I

  relations
    ruleInstType: occurrence -> RTYPE
    ruleType: occurrence -> RTYPE

rules

  // Declares a single rule instance in a scope
  declareRule : scope * string * TYPE * TYPE

  declareRule(s, n, T1, T2) :- {rls rt rts}
    rt == RULE(T1, T2),
    s -> RuleInst{n} with ruleInstType rt,
    query ruleType
      filter resolveMatch[Rule{n}] & ~e and { t :- t == Rule{n} }
      in s |-> rts,
    parentOk(rts, rt).

rules

  parentOk: list((path * (occurrence * RTYPE))) * RTYPE

  // Rule definition is valid when no parent rule specified
  parentOk([], _).

  // Rule definition is valid when it complies with parent
  parentOk([(_, (_, RULE(T1, T2))) | _], RULE(T3, T4)) :-
    T1 == T3 | error $[Input type [T3] does not match with specified type [T1]],
    T2 == T4 | error $[Output type [T4] does not match with specified type [T2]].

rules

  // Declares a rule definition for a module
  declareRules : scope

  declareRules(s) :- {rls uns rds uds}
    // Get names of rule instances declared in this scope
    query ruleInstType
      filter e
      in s |-> rls,
    unique(namesOfRules(rls)) == uns,
    // Get visible rule definitions
    query ruleType
      filter resolveMatch[Rule{_}] & ~e
      in s |-> rds,
    unique(namesOfRules(rds)) == uds,
    // Create definitions for new rules
    declareRuleDefs(s, subtract(uds, uns)).


rules

  namesOfRules maps nameOfRule(list(*)) = list(*)

  nameOfRule : (path * (occurrence * RTYPE)) -> string
  nameOfRule((_, (RuleInst{n}, _))) = n.
  nameOfRule((_, (Rule{n}, _))) = n.

rules

  unique: list(string) -> list(string)

  unique([]) = [].
  unique([h | t]) = [h | unique(remove(h, t))].

rules

  subtract: list(string) * list(string) -> list(string)

  subtract([], r) = r.
  subtract([i | t], r) = subtract(t, remove(i, r)).

rules

  remove: string * list(string) -> list(string)

  remove(_, []) = [].
  remove(s, [s | l]) = remove(s, l).
  remove(s1, [s2 | l]) = [s2 | remove(s1, l)] :-
    s1 != s2.

rules

  declareRuleDefs maps declareRuleDef(*, list(*))

  declareRuleDef : scope * string
  
  declareRuleDef(s, rn) :- {T1 T2 T3 T4 rls}
    ruleInstType of RuleInst{rn} in s |-> rls,
    typesOfRules(rls) == (T3, T4),
    uniqType(T3) == [T1] | error $[Rule [rn] has different input sorts],
    uniqType(T4) == [T2] | error $[Rule [rn] has different output sorts],
    s -> Rule{rn} with ruleType RULE(T1, T2).

rules

  typesOfRules maps typeOfRule(list(*)) = (list(*), list(*))

  typeOfRule: (path * (occurrence * RTYPE)) -> (TYPE * TYPE)
  typeOfRule((_, (_, RULE(T1, T2)))) = (T1, T2).

rules

  uniqType: list(TYPE) -> list(TYPE)

  uniqType([]) = [].
  uniqType([h | t]) = [h | uniqType(removeType(h, t))].

rules

  removeType: TYPE * list(TYPE) -> list(TYPE)

  removeType(_, []) = [].
  removeType(s, [s | l]) = removeType(s, l).
  removeType(s1, [s2 | l]) = [s2 | removeType(s1, l)] :-
    s1 != s2.

rules

  resolveRule : scope * string -> RTYPE // TODO: rename resolveRule

  resolveRule(s, n) = rule :-
    ruleType of Rule{n} in s |-> [(_, (_, rule)) | _].