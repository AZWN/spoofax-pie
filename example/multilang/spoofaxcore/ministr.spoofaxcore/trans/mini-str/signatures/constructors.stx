module mini-str/signatures/constructors

imports
  cons-type-interface/types
  cons-type-interface/sorts
  cons-type-interface/constructors

  signatures/mini-str/mini-str-sig
  mini-str/signatures/sorts

rules

  conssOk maps consOk(*, list(*))

  consOk: scope * ConstructorDef

  consOk(s, NoArgs(SMBL-LEX2SMBL(cn), SMBL-LEX2SMBL(sn))) :- {T}
    typeOfSort(s, sn) == T,
    declareCons(s, T, cn, []).

  consOk(s, WithArgs(SMBL-LEX2SMBL(cn), p, SMBL-LEX2SMBL(sn))) :- {T T1}
    typeOfSort(s, sn) == T,
    sortsOfParams(s, p) == T1,
    declareCons(s, T, cn, T1).

rules

  sortsOfParams maps sortOfParam(*, list(*)) = list(*)

  sortOfParam: scope * ArgSort -> TYPE

  sortOfParam(s, Sort(SMBL-LEX2SMBL(n))) = typeOfSort(s, n).
  sortOfParam(s, Opt(SMBL-LEX2SMBL(n)))  = TOPT(typeOfSort(s, n)).
  sortOfParam(s, Iter(SMBL-LEX2SMBL(n))) = TITER(typeOfSort(s, n)).
  sortOfParam(s, Star(SMBL-LEX2SMBL(n))) = TSTAR(typeOfSort(s, n)).
