module literal

imports
  
  lex/meta

lexical syntax // String lexical syntax

  STRING     = StringChar+
  StringChar = ~[\"\}\:\,\$\ \t\n\r]
  StringChar = EscapeQuoteChar
  StringChar = EscapeBracesChar
  StringChar = BackSlashChar
  StringChar = EscapeColonChar
  StringChar = EscapeCommaChar
  StringChar = EscapeDollarChar
  
  STRINGWS     = StringWSChar+
  StringWSChar = ~[\"\$\n\r]
  StringWSChar = EscapeQuoteChar
  StringWSChar = EscapeBracesChar
  StringWSChar = BackSlashChar
  StringWSChar = EscapeColonChar
  StringWSChar = EscapeCommaChar
  StringWSChar = EscapeDollarChar

  BackSlashChar    = "\\"
  EscapeBracesChar = "\\}"
  EscapeQuoteChar  = "\\\""
  EscapeColonChar  = "\\:"
  EscapeCommaChar  = "\\,"
  EscapeDollarChar = "\\$"

lexical restrictions // String lexical restrictions

  BackSlashChar -/- [\"]
  STRING        -/- ~[\"\}\:\,\$\ \t\n\r]
  STRINGWS      -/- ~[\"\$\n\r]
  
lexical syntax // Reject certain keywords as strings.

  STRING = "provided" {reject}
  STRING = "envvar" {reject}

syntax // String with interpolation

  String-CF.String      = StringPart-CF+
  StringPart-CF.Chars   = STRING-LEX
  StringPart-CF.Ref     = "$" ID-CF
  StringPart-CF.RefWrap = "${" ID-CF "}"
  
  String-CF.StringWs      = "\"" StringWsPart-CF* "\""
  StringWsPart-CF.Chars   = STRINGWS-LEX
  StringWsPart-CF.Ref     = "$" ID-CF
  StringWsPart-CF.RefWrap = "${" ID-CF "}"

context-free syntax // String without interpolation

  PlainString.PlainString   = STRING
  PlainString.PlainStringWs = "\"" STRINGWS "\""

context-free syntax // List of strings

  Strings.Strings = <<{String ", "}*>>

context-free syntax // Boolean

  Bool.Bool         = <<TrueOrFalse>>
  TrueOrFalse.True  = "true"
  TrueOrFalse.False = "false"
