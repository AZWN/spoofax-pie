package {{genInstance.packageId}};

import mb.common.message.KeyedMessages;
import mb.common.style.Styling;
import mb.common.token.Token;
import mb.common.util.CollectionView;
import mb.common.util.ListView;
import mb.common.util.MapView;
import mb.common.util.SetView;
import mb.pie.api.Task;
import mb.resource.ResourceKey;
import mb.spoofax.core.language.LanguageInstance;
import mb.spoofax.core.language.cli.CliCommandItem;
import mb.spoofax.core.language.cli.CliCommandList;
import mb.spoofax.core.language.command.AutoCommandRequest;
import mb.spoofax.core.language.command.CommandDef;
import mb.spoofax.core.language.command.CommandExecutionType;
import mb.spoofax.core.language.command.CommandRequest;
import mb.spoofax.core.language.command.arg.RawArgs;
import mb.spoofax.core.language.menu.CommandAction;
import mb.spoofax.core.language.menu.Menu;
import mb.spoofax.core.language.menu.MenuItem;
import org.checkerframework.checker.nullness.qual.Nullable;

import javax.inject.Inject;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Set;

public class {{genInstance.id}} implements LanguageInstance {
    private final static SetView<String> extensions = SetView.of({{#fileExtensions}}"{{this}}"{{^-last}}, {{/-last}}{{/fileExtensions}});

{{#injectedTaskDefs}}
    private final {{variable}};
{{/injectedTaskDefs}}

    private final CollectionView<CommandDef<?>> commandDefs;


    @Inject public {{genInstance.id}}(
{{#injectedTaskDefs}}
        {{variable}},
{{/injectedTaskDefs}}
        Set<CommandDef<?>> commandDefs
    ) {
{{#injectedTaskDefs}}
        {{thisAssign}};
{{/injectedTaskDefs}}
        this.commandDefs = CollectionView.copyOf(commandDefs);
    }


    @Override public String getDisplayName() {
        return "{{shared.name}}";
    }

    @Override public SetView<String> getFileExtensions() {
        return extensions;
    }


    @Override public Task<@Nullable ArrayList<? extends Token<?>>> createTokenizeTask(ResourceKey resourceKey) {
        return {{tokenizeInjection.name}}.createTask(resourceKey);
    }

    @Override public Task<KeyedMessages> createCheckTask(ResourceKey resourceKey) {
        return {{checkInjection.name}}.createTask(resourceKey);
    }

    @Override public Task<@Nullable Styling> createStyleTask(ResourceKey resourceKey) {
        return {{styleInjection.name}}.createTask(resourceKey);
    }


    @Override public CollectionView<CommandDef<?>> getCommandDefs() {
        return commandDefs;
    }

    @Override public CollectionView<AutoCommandRequest<?>> getAutoCommandRequests() {
        return CollectionView.of(); // TODO
    }


    @Override public CliCommandItem getRootCliCommandItem() {
        return CliCommandList.of("{{shared.name}}"); // TODO
    }


    @Override public ListView<MenuItem> getMainMenuItems() {
        return getEditorContextMenuItems();
    }

    @Override public ListView<MenuItem> getResourceContextMenuItems() {
        return ListView.of(); // TODO
    }

    @Override public ListView<MenuItem> getEditorContextMenuItems() {
        return ListView.of(); // TODO
    }
}
