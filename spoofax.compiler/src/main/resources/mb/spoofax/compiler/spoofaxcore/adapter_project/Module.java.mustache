package {{genModule.packageId}};

import dagger.Module;
import dagger.Provides;
import dagger.multibindings.ElementsIntoSet;
import mb.log.api.LoggerFactory;
import mb.pie.api.MapTaskDefs;
import mb.pie.api.Pie;
import mb.pie.api.PieSession;
import mb.pie.api.TaskDef;
import mb.pie.api.TaskDefs;
import mb.spoofax.core.language.LanguageInstance;
import mb.spoofax.core.language.LanguageScope;
import mb.stratego.common.StrategoRuntime;
import mb.stratego.common.StrategoRuntimeBuilder;

import {{parser.factory.qualifiedId}};
import {{parser.parser.qualifiedId}};
{{#styler}}
import {{this.factory.qualifiedId}};
import {{this.styler.qualifiedId}};
{{/styler}}
{{#strategoRuntime}}
import {{this.factory.qualifiedId}};
{{/strategoRuntime}}
{{#constraintAnalyzer}}
import {{this.factory.qualifiedId}};
import {{this.constraintAnalyzer.qualifiedId}};
{{/constraintAnalyzer}}

import javax.inject.Named;
import java.util.HashSet;
import java.util.Set;

@Module
public class {{genModule.id}} {
    @Provides @LanguageScope
    {{parser.factory.id}} provideParserFactory() {
        return new {{parser.factory.id}}();
    }

    @Provides /* Unscoped: parser has state, so create a new parser every call. */
    {{parser.parser.id}} provideParser({{parser.factory.id}} parserFactory) {
        return parserFactory.create();
    }
{{#styler}}


    @Provides @LanguageScope
    {{this.factory.id}} provideStylerFactory(LoggerFactory loggerFactory) {
        return new {{this.factory.id}}(loggerFactory);
    }

    @Provides @LanguageScope
    {{this.styler.id}} provideStyler({{this.factory.id}} stylerFactory) {
        return stylerFactory.create();
    }
{{/styler}}
{{#strategoRuntime}}


    @Provides @LanguageScope
    {{this.factory.id}} provideStrategoRuntimeBuilderFactory() {
        return new {{this.factory.id}}();
    }

    @Provides @LanguageScope
    StrategoRuntimeBuilder provideStrategoRuntimeBuilder({{this.factory.id}} factory) {
        return factory.create();
    }

    @Provides @LanguageScope
    StrategoRuntime providePrototypeStrategoRuntime(StrategoRuntimeBuilder builder) {
        return builder.build();
    }
{{/strategoRuntime}}
{{#constraintAnalyzer}}


    @Provides @LanguageScope
    {{this.factory.id}} provideConstraintAnalyzerFactory(StrategoRuntime prototypeStrategoRuntime) {
        return new {{this.factory.id}}(prototypeStrategoRuntime);
    }

    @Provides @LanguageScope
    {{this.constraintAnalyzer.id}} provideConstraintAnalyzer({{this.factory.id}} factory) {
        return factory.create();
    }
{{/constraintAnalyzer}}


    @Provides @LanguageScope @Named("language") @ElementsIntoSet
    static Set<TaskDef<?, ?>> provideTaskDefsSet(
        {{tokenizeTaskDefRef.type.qualifiedId}} {{tokenizeTaskDefRef.name}},
        {{checkTaskDefRef.type.qualifiedId}} {{checkTaskDefRef.name}},
        {{styleTaskDefRef.type.qualifiedId}} {{styleTaskDefRef.name}}{{#additionalTaskDefs}},
        {{this.type.qualifiedId}} {{this.name}}{{/additionalTaskDefs}}
    ) {
        final HashSet<TaskDef<?, ?>> taskDefs = new HashSet<>();
        taskDefs.add({{tokenizeTaskDefRef.name}});
        taskDefs.add({{checkTaskDefRef.name}});
        taskDefs.add({{styleTaskDefRef.name}});
{{#additionalTaskDefs}}
        taskDefs.add({{this.name}});
{{/additionalTaskDefs}}
        return taskDefs;
    }

    @Provides @LanguageScope @Named("language")
    TaskDefs provideTaskDefs(@Named("language") Set<TaskDef<?, ?>> taskDefs) {
        return new MapTaskDefs(taskDefs);
    }


    @Provides @LanguageScope
    LanguageInstance provideLanguageInstance({{genInstance.id}} instance) {
        return instance;
    }

    @Provides /* Unscoped: new session every call. */
    PieSession providePieSession(Pie pie, @Named("language") TaskDefs languageTaskDefs) {
        return pie.newSession(languageTaskDefs);
    }
}
