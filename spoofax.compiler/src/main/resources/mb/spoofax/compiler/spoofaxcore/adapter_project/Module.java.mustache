package {{genModule.packageId}};

import dagger.Module;
import dagger.Provides;
import dagger.multibindings.ElementsIntoSet;
import mb.log.api.LoggerFactory;
import mb.spoofax.core.language.LanguageInstance;
import mb.spoofax.core.language.LanguageScope;
import mb.stratego.common.StrategoRuntime;
import mb.stratego.common.StrategoRuntimeBuilder;

import javax.inject.Named;
import java.util.HashSet;
import java.util.Set;

@Module
public class {{genModule.id}} {
    @Provides @LanguageScope
    {{parser.factoryClass}} provideParserFactory() {
        return new {{parser.factoryClass}}();
    }

    @Provides /* Unscoped: parser has state, so create a new parser every call. */
    {{parser.parserClass}} provideParser({{parser.factoryClass}} parserFactory) {
        return parserFactory.create();
    }

{{#styler}}
    @Provides @LanguageScope
    {{this.factoryClass}} provideStylerFactory(LoggerFactory loggerFactory) {
        return new {{this.factoryClass}}(loggerFactory);
    }

    @Provides @LanguageScope
    {{this.stylerClass}} provideStyler({{this.factoryClass}} stylerFactory) {
        return stylerFactory.create();
    }
{{/styler}}

{{#strategoRuntime}}
    @Provides @LanguageScope
    {{this.factoryClass}} provideStrategoRuntimeBuilderFactory() {
        return new {{this.factoryClass}}();
    }

    @Provides @LanguageScope
    StrategoRuntimeBuilder provideStrategoRuntimeBuilder({{this.factoryClass}} factory) {
        return factory.create();
    }

    @Provides @LanguageScope
    StrategoRuntime providePrototypeStrategoRuntime(StrategoRuntimeBuilder builder) {
        return builder.build();
    }
{{/strategoRuntime}}

{{#constraintAnalyzer}}
    @Provides @LanguageScope
    {{this.factoryClass}} provideConstraintAnalyzerFactory(StrategoRuntime prototypeStrategoRuntime) {
        return new {{this.factoryClass}}(prototypeStrategoRuntime);
    }

    @Provides @LanguageScope
    {{this.constraintAnalyzerClass}} provideConstraintAnalyzer({{this.factoryClass}} factory) {
        return factory.create();
    }
{{/constraintAnalyzer}}

    @Provides @LanguageScope @Named("language") @ElementsIntoSet
    static Set<TaskDef<?, ?>> provideTaskDefsSet(
        TigerParse parse,
        TigerAnalyze analyze,

        TigerListLiteralVals listLiteralVals,
        TigerListDefNames listDefNames,

        TigerTokenize tokenize,
        TigerStyle style,
        TigerCheck check,

        TigerShowParsedAst showParsedAst,
        TigerShowPrettyPrintedText showPrettyPrintedText,
        TigerShowAnalyzedAst showAnalyzedAst,
        TigerShowDesugaredAst showDesugaredAst,
        TigerCompileFile compileFile,
        TigerAltCompileFile altCompileFile,
        TigerCompileDirectory compileDirectory
    ) {
        final HashSet<TaskDef<?, ?>> taskDefs = new HashSet<>();

        taskDefs.add(parse);
        taskDefs.add(analyze);

        taskDefs.add(listLiteralVals);
        taskDefs.add(listDefNames);

        taskDefs.add(tokenize);
        taskDefs.add(style);
        taskDefs.add(check);

        taskDefs.add(showParsedAst);
        taskDefs.add(showPrettyPrintedText);
        taskDefs.add(showAnalyzedAst);
        taskDefs.add(showDesugaredAst);
        taskDefs.add(compileFile);
        taskDefs.add(altCompileFile);
        taskDefs.add(compileDirectory);

        return taskDefs;
    }

    @Provides @LanguageScope @Named("language")
    TaskDefs provideTaskDefs(@Named("language") Set<TaskDef<?, ?>> taskDefs) {
        return new MapTaskDefs(taskDefs);
    }


    @Provides @LanguageScope
    LanguageInstance provideLanguageInstance({{genInstanceClass}} tigerInstance) {
        return tigerInstance;
    }

    @Provides /* Unscoped: new session every call. */
    PieSession providePieSession(Pie pie, @Named("language") TaskDefs languageTaskDefs) {
        return pie.newSession(languageTaskDefs);
    }
}
