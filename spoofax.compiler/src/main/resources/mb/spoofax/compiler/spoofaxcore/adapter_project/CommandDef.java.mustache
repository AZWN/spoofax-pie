package {{commandDefClass.packageId}};

import com.google.inject.Inject;
import mb.common.util.EnumSetView;
import mb.common.util.ListView;
import mb.pie.api.Task;
import mb.resource.hierarchical.ResourcePath;
import mb.spoofax.core.language.command.CommandContextType;
import mb.spoofax.core.language.command.CommandDef;
import mb.spoofax.core.language.command.CommandExecutionType;
import mb.spoofax.core.language.command.CommandInput;
import mb.spoofax.core.language.command.CommandOutput;
import mb.spoofax.core.language.command.arg.ArgProvider;
import mb.spoofax.core.language.command.arg.Param;
import mb.spoofax.core.language.command.arg.ParamDef;
import mb.spoofax.core.language.command.arg.RawArgs;
import org.checkerframework.checker.nullness.qual.Nullable;

import {{taskDef.type.qualifiedId}};

public class {{commandDefClass.id}} implements CommandDef<{{argClass.qualifiedId}}> {
    private final {{taskDef.type.id}} {{taskDef.name}};


    @Inject public {{commandDefClass.id}}({{taskDef.type.id}} {{taskDef.name}}) {
        this.{{taskDef.name}} = {{taskDef.name}};
    }


    @Override public String getId() {
        return {{taskDef.name}}.getId();
    }

    @Override public String getDisplayName() {
        return "{{displayName}}";
    }

    @Override public EnumSetView<CommandExecutionType> getSupportedExecutionTypes() {
        return EnumSetView.of(
{{#supportedExecutionTypes}}
            CommandExecutionType.{{this}}{{^-last}},{{/-last}}
{{/supportedExecutionTypes}}
        );
    }

    @Override public EnumSetView<CommandContextType> getRequiredContextTypes() {
        return EnumSetView.of(
{{#requiredContextTypes}}
            CommandContextType.{{this}}{{^-last}},{{/-last}}
{{/requiredContextTypes}}
        );
    }

    @Override public ParamDef getParamDef() {
        return new ParamDef(
{{#params}}
            Param.of("{{id}}", {{type.qualifiedId}}.class, {{required}}, {{#converter}}new {{type.qualifiedId}}(), {{/converter}}ListView.of({{#providers}}{{toJavaCode}}{{^-last}}, {{/-last}}{{/providers}})){{^-last}},{{/-last}}
{{/params}}
        );
    }

    @Override public {{argClass.qualifiedId}} fromRawArgs(RawArgs rawArgs) {
{{#params}}
 {{#required}}
        final {{type.qualifiedId}} {{id}} = rawArgs.getOrThrow("{{id}}");
 {{/required}}
 {{^required}}
        final {{type.nullableQualifiedId}} {{id}} = rawArgs.getOrNull("{{id}}");
 {{/required}}
{{/params}}
        return new {{argClass.qualifiedId}}({{#params}}{{id}}{{^-last}}, {{/-last}}{{/params}});
    }

    @Override public Task<CommandOutput> createTask(CommandInput<{{argClass.qualifiedId}}> input) {
        return {{taskDef.name}}.createTask(input);
    }
}
