package {{genInstance.packageId}};

import mb.common.message.KeyedMessages;
import mb.common.message.Messages;
import mb.common.style.Styling;
import mb.common.token.Token;

import mb.common.region.Region;
import mb.common.util.CollectionView;
import mb.common.util.EntryView;
import mb.common.util.ListView;
import mb.common.util.MapView;
import mb.common.util.SetView;
import mb.completions.common.CompletionResult;
import mb.pie.api.Task;
import mb.resource.ResourceKey;
import mb.resource.hierarchical.ResourcePath;
import mb.resource.hierarchical.match.PathResourceMatcher;
import mb.resource.hierarchical.match.path.ExtensionsPathMatcher;
import mb.resource.hierarchical.match.path.NoHiddenPathMatcher;
import mb.resource.hierarchical.walk.PathResourceWalker;
import mb.spoofax.core.language.LanguageInspection;
import mb.spoofax.core.language.LanguageInstance;
import mb.spoofax.core.language.cli.CliCommand;
import mb.spoofax.core.language.cli.CliParam;
import mb.spoofax.core.language.command.AutoCommandRequest;
import mb.spoofax.core.language.command.CommandDef;
import mb.spoofax.core.language.command.CommandExecutionType;
import mb.spoofax.core.language.command.CommandRequest;
import mb.spoofax.core.language.command.EditorSelectionType;
import mb.spoofax.core.language.command.EditorFileType;
import mb.spoofax.core.language.command.EnclosingCommandContextType;
import mb.spoofax.core.language.command.HierarchicalResourceType;
import mb.spoofax.core.language.command.arg.RawArgs;
import mb.spoofax.core.language.menu.CommandAction;
import mb.spoofax.core.language.menu.MenuItem;
import org.checkerframework.checker.nullness.qual.Nullable;

import javax.inject.Inject;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Set;

public class {{genInstance.id}} implements LanguageInstance {
    private final static SetView<String> fileExtensions = SetView.of({{#shared.fileExtensions}}"{{this}}"{{^-last}}, {{/-last}}{{/shared.fileExtensions}});

{{#injected}}
    private final {{variable}};
{{/injected}}

    private final CollectionView<CommandDef<?>> commandDefs;
    private final CollectionView<AutoCommandRequest<?>> autoCommandDefs;


    @Inject public {{genInstance.id}}(
{{#injected}}
        {{variable}},
{{/injected}}
        Set<CommandDef<?>> commandDefs,
        Set<AutoCommandRequest<?>> autoCommandDefs
    ) {
{{#injected}}
        {{thisAssign}};
{{/injected}}
        this.commandDefs = CollectionView.copyOf(commandDefs);
        this.autoCommandDefs = CollectionView.copyOf(autoCommandDefs);
    }


    @Override public String getDisplayName() {
        return "{{shared.name}}";
    }

    @Override public SetView<String> getFileExtensions() {
        return fileExtensions;
    }


    @Override public Task<@Nullable ArrayList<? extends Token<?>>> createTokenizeTask(ResourceKey resourceKey) {
        return {{tokenizeInjection.name}}.createTask(resourceKey);
    }

    @Override public Task<@Nullable Styling> createStyleTask(ResourceKey resourceKey) {
        return {{styleInjection.name}}.createTask({{parseInjection.name}}.createNullableRecoverableTokensSupplier(resourceKey));
    }

    @Override
    public Task<@Nullable CompletionResult> createCompletionTask(ResourceKey resourceKey, Region primarySelection) {
        return {{completeInjection.name}}.createTask(new {{completeInjection.type.qualifiedId}}.Input({{parseInjection.name}}.createNullableRecoverableAstSupplier(resourceKey)));
    }

{{#isMultiFile}}
    @Override public LanguageInspection getInspection() {
       return LanguageInspection.multiFile(i -> {{checkInjection.name}}.createTask(new {{checkInjection.type.qualifiedId}}.Input(i.root, i.walker, i.matcher)));
    }
{{/isMultiFile}}
{{^isMultiFile}}
    @Override public LanguageInspection getInspection() {
        return LanguageInspection.singleFile({{checkInjection.name}}::createTask);
    }
{{/isMultiFile}}


{{#isMultiFile}}
    @Override public Task<KeyedMessages> createCheckTask(ResourcePath projectRoot) {
        return {{checkInjection.name}}.createTask(new {{checkInjection.type.qualifiedId}}.Input(
            projectRoot,
            new PathResourceWalker(new NoHiddenPathMatcher()),
            new PathResourceMatcher(new ExtensionsPathMatcher(getFileExtensions().asUnmodifiable()))));
    }
{{/isMultiFile}}
{{^isMultiFile}}
    @Override public Task<KeyedMessages> createCheckTask(ResourcePath projectRoot) {
        return {{aggregatorInjection.name}}.createTask(new {{aggregatorInjection.type.qualifiedId}}.Input(
            projectRoot,
            new PathResourceWalker(new NoHiddenPathMatcher()),
            new PathResourceMatcher(new ExtensionsPathMatcher(getFileExtensions().asUnmodifiable()))));
    }
{{/isMultiFile}}
    @Override public CollectionView<CommandDef<?>> getCommandDefs() {
        return commandDefs;
    }

    @Override public CollectionView<AutoCommandRequest<?>> getAutoCommandRequests() {
        return autoCommandDefs;
    }


    @Override public CliCommand getCliCommand() {
{{#cliCommand}}
        return {{>adapter_project/partial/CliCommand.mustache}};
{{/cliCommand}}
    }


    @Override public ListView<MenuItem> getMainMenuItems() {
        return ListView.of(
{{#mainMenuItems}}
            {{>adapter_project/partial/MenuItem.mustache}}{{^-last}},{{/-last}}
{{/mainMenuItems}}
        );
    }

    @Override public ListView<MenuItem> getResourceContextMenuItems() {
        return ListView.of(
{{#resourceContextMenuItems}}
            {{>adapter_project/partial/MenuItem.mustache}}{{^-last}},{{/-last}}
{{/resourceContextMenuItems}}
        );
    }

    @Override public ListView<MenuItem> getEditorContextMenuItems() {
        return ListView.of(
{{#editorContextMenuItems}}
            {{>adapter_project/partial/MenuItem.mustache}}{{^-last}},{{/-last}}
{{/editorContextMenuItems}}
        );
    }
}
