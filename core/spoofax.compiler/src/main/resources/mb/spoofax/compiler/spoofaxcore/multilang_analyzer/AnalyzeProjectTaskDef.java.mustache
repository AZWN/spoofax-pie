package {{genAnalyzeTaskDef.packageId}};

import mb.common.message.KeyedMessages;
import mb.pie.api.ExecContext;
import mb.pie.api.TaskDef;
import mb.resource.ResourceService;
import mb.resource.hierarchical.ResourcePath;
import mb.spoofax.core.language.LanguageScope;
import mb.spoofax.core.language.command.CommandFeedback;
import mb.spoofax.core.language.command.CommandOutput;
import mb.statix.multilang.AnalysisContext;
import mb.statix.multilang.AnalysisContextService;
import mb.statix.multilang.ContextId;
import mb.statix.multilang.LanguageId;
import mb.statix.multilang.MultiLangConfig;
import mb.statix.multilang.tasks.SmlBuildMessages;

import javax.inject.Inject;
import java.util.List;
import java.util.stream.Collectors;

@LanguageScope
public class {{genAnalyzeTaskDef.id}} implements TaskDef<ResourcePath, CommandOutput> {
    private final SmlBuildMessages buildMessages;
    private final AnalysisContextService analysisContextService;
    private final ResourceService resourceService;

    @Inject public {{genAnalyzeTaskDef.id}}(
        SmlBuildMessages buildMessages,
        AnalysisContextService analysisContextService,
        ResourceService resourceService
    ) {
        this.buildMessages = buildMessages;
        this.analysisContextService = analysisContextService;
        this.resourceService = resourceService;
    }

    @Override public String getId() {
        return "{{genAnalyzeTaskDef.qualifiedId}}";
    }

    @Override
    public CommandOutput exec(ExecContext context, ResourcePath projectRoot) {
        MultiLangConfig config = ContextUtils.readYamlConfig(resourceService, projectRoot);
        ContextId contextId = config.getLanguageContexts()
                .getOrDefault(new LanguageId("{{languageId}}"), new ContextId("{{contextId}}"));
        AnalysisContext analysisContext = analysisContextService
                .getAnalysisContext(contextId);

        KeyedMessages messages = context.require(buildMessages
                .createTask(new SmlBuildMessages.Input(projectRoot, analysisContext)));

        List<CommandFeedback> output = messages.getAllMessages().stream()
                .flatMap(resourceMessages -> resourceMessages.getValue().stream()
                        .map(message -> CommandFeedback.showText(
                                String.format("[%s] %s", message.severity, message.text),
                                resourceMessages.getKey().getId().toString()
                        )))
                .collect(Collectors.toList());

        return CommandOutput.of(output);
    }
}
