package {{genCheckTaskDef.packageId}};

import mb.common.message.Messages;
import mb.common.message.MessagesBuilder;
import mb.common.result.Result;
import mb.pie.api.ExecContext;
import mb.pie.api.ExecException;
import mb.pie.api.ResourceStringSupplier;
import mb.pie.api.TaskDef;
import mb.resource.ResourceKey;
import mb.spoofax.core.language.LanguageScope;
import org.checkerframework.checker.nullness.qual.Nullable;

import javax.inject.Inject;
import java.io.IOException;

@LanguageScope
public class {{genCheckTaskDef.id}} implements TaskDef<ResourceKey, Messages> {
    private final {{parser.parseTaskDef.qualifiedId}} parse;
{{#constraintAnalyzer}}
    private final {{this.analyzeTaskDef.qualifiedId}} analyze;
{{/constraintAnalyzer}}

    @Inject public {{genCheckTaskDef.id}}(
      {{parser.parseTaskDef.qualifiedId}} parse{{#constraintAnalyzer}},
      {{this.analyzeTaskDef.qualifiedId}} analyze
{{/constraintAnalyzer}}
    ) {
        this.parse = parse;
{{#constraintAnalyzer}}
        this.analyze = analyze;
{{/constraintAnalyzer}}
    }

    @Override public String getId() {
        return "{{genCheckTaskDef.qualifiedId}}";
    }

    @Override public Messages exec(ExecContext context, ResourceKey key) throws IOException {
        final MessagesBuilder messagesBuilder = new MessagesBuilder();
        final ResourceStringSupplier stringSupplier = new ResourceStringSupplier(key);
        final Messages parseMessages = context.require(parse.createMessagesSupplier(stringSupplier));
        messagesBuilder.addMessages(parseMessages);
{{#constraintAnalyzer}}
        // TODO: propagate error/messages from analysis failure as well.
        final Result<{{this.analyzeTaskDef.qualifiedId}}.Output, ?> analysisOutput = context.require(analyze, new {{this.analyzeTaskDef.qualifiedId}}.Input(key, parse.createRecoverableAstSupplier(stringSupplier)));
        analysisOutput.ifOk(output -> {
            messagesBuilder.addMessages(output.result.messages);
        });
{{/constraintAnalyzer}}
        return messagesBuilder.build();
    }
}
