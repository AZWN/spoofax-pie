package {{genFactory.packageId}};

import mb.log.api.LoggerFactory;
import mb.resource.ResourceService;
import mb.resource.url.URLPath;
import mb.resource.url.URLResource;
import mb.spoofax.compiler.interfaces.spoofaxcore.StrategoRuntimeBuilderFactory;
import mb.stratego.common.StrategoRuntimeBuilder;
import org.checkerframework.checker.nullness.qual.Nullable;

import java.net.URL;

public class {{genFactory.id}} implements StrategoRuntimeBuilderFactory {
    @Override public StrategoRuntimeBuilder create(LoggerFactory loggerFactory, ResourceService resourceService) {
        final StrategoRuntimeBuilder builder = new StrategoRuntimeBuilder(loggerFactory, resourceService);
{{#interopRegisterersByReflection}}
        builder.addInteropRegistererByReflection("{{this}}");
{{/interopRegisterersByReflection}}
{{#copyCTree}}
        {
            final String resource = "{{languageProject.packagePath}}/target/metaborg/stratego.ctree";
            final @Nullable URL locationURL = {{genFactory.id}}.class.getClassLoader().getResource(resource);
            if(locationURL == null) {
                throw new RuntimeException("Cannot create Stratego runtime builder; cannot find resource '" + resource + "' in classloader resources");
            }
            builder.addCtree(new URLResource(locationURL));
        }
{{/copyCTree}}
        builder.withJarParentClassLoader({{genFactory.id}}.class.getClassLoader());
        builder.addLibrary(new mb.constraint.common.stratego.ConstraintPrimitiveLibrary(resourceService));
{{#addNaBL2Primitives}}
        builder.addLibrary(new mb.nabl2.common.NaBL2PrimitiveLibrary());
{{/addNaBL2Primitives}}
{{#addStatixPrimitives}}
        {
            builder.addLibrary(new mb.statix.common.StatixPrimitiveLibrary());
            builder.addLibrary(new mb.spoofax2.common.primitive.Spoofax2PrimitiveLibrary(loggerFactory, resourceService));
            final String resource = "{{languageProject.packagePath}}/";
            final @Nullable URL locationURL = {{genFactory.id}}.class.getClassLoader().getResource(resource);
            if(locationURL == null) {
                throw new RuntimeException("Cannot create Spoofax2Context; cannot find resource '" + resource + "' in classloader resources");
            }
            final URLPath path = new URLPath(locationURL);
            builder.addContextObject(new mb.spoofax2.common.primitive.generic.Spoofax2Context("{{languageProject.project.coordinate.groupId}}", "{{languageProject.project.coordinate.artifactId}}", "{{languageProject.project.coordinate.version}}", path, resourceService.toResourceKeyString(path)));
        }
{{/addStatixPrimitives}}
        return builder;
    }
}
