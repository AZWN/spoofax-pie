package {{genModule.packageId}};

import dagger.Module;
import dagger.Provides;
import dagger.multibindings.ElementsIntoSet;
import mb.log.api.LoggerFactory;
import mb.common.util.MapView;
import mb.common.util.EntryView;
import mb.log.api.LoggerFactory;
import mb.pie.api.MapTaskDefs;
import mb.pie.api.Pie;
import mb.pie.api.PieSession;
import mb.pie.api.TaskDef;
import mb.pie.api.TaskDefs;
import mb.resource.ResourceService;
import mb.spoofax.core.language.LanguageInstance;
import mb.spoofax.core.language.LanguageScope;
import mb.spoofax.core.language.command.AutoCommandRequest;
import mb.spoofax.core.language.command.CommandDef;
import mb.spoofax.core.language.command.HierarchicalResourceType;
import mb.spoofax.core.language.command.arg.RawArgs;
import mb.stratego.common.StrategoRuntime;
import mb.stratego.common.StrategoRuntimeBuilder;

import javax.inject.Named;
import java.util.HashSet;
import java.util.Set;

@Module
public class {{genModule.id}} {
    @Provides @LanguageScope
    {{parser.languageProjectInput.factory.qualifiedId}} provideParserFactory() {
        return new {{parser.languageProjectInput.factory.qualifiedId}}();
    }

    @Provides /* Unscoped: parser has state, so create a new parser every call. */
    {{parser.languageProjectInput.parser.qualifiedId}} provideParser({{parser.languageProjectInput.factory.qualifiedId}} parserFactory) {
        return parserFactory.create();
    }
{{#styler}}


    @Provides @LanguageScope
    {{this.languageProjectInput.factory.qualifiedId}} provideStylerFactory(LoggerFactory loggerFactory) {
        return new {{this.languageProjectInput.factory.qualifiedId}}(loggerFactory);
    }

    @Provides @LanguageScope
    {{this.languageProjectInput.styler.qualifiedId}} provideStyler({{this.languageProjectInput.factory.qualifiedId}} stylerFactory) {
        return stylerFactory.create();
    }
{{/styler}}
{{#strategoRuntime}}


    @Provides @LanguageScope
    {{this.languageProjectInput.factory.qualifiedId}} provideStrategoRuntimeBuilderFactory() {
        return new {{this.languageProjectInput.factory.qualifiedId}}();
    }

    @Provides @LanguageScope
    StrategoRuntimeBuilder provideStrategoRuntimeBuilder({{this.languageProjectInput.factory.qualifiedId}} factory, LoggerFactory loggerFactory, ResourceService resourceService) {
        return factory.create(loggerFactory, resourceService);
    }

    @Provides @LanguageScope
    StrategoRuntime providePrototypeStrategoRuntime(StrategoRuntimeBuilder builder) {
        return builder.build();
    }
{{/strategoRuntime}}
{{#constraintAnalyzer}}


    @Provides @LanguageScope
    {{this.languageProjectInput.factory.qualifiedId}} provideConstraintAnalyzerFactory(LoggerFactory loggerFactory, ResourceService resourceService, StrategoRuntime prototypeStrategoRuntime) {
        return new {{this.languageProjectInput.factory.qualifiedId}}(loggerFactory, resourceService, prototypeStrategoRuntime);
    }

    @Provides @LanguageScope
    {{this.languageProjectInput.constraintAnalyzer.qualifiedId}} provideConstraintAnalyzer({{this.languageProjectInput.factory.qualifiedId}} factory) {
        return factory.create();
    }
{{/constraintAnalyzer}}


    @Provides @LanguageScope @Named("language") @ElementsIntoSet
    static Set<TaskDef<?, ?>> provideTaskDefsSet(
{{#providedTaskDefs}}
        {{variable}}{{^-last}},{{/-last}}
{{/providedTaskDefs}}
    ) {
        final HashSet<TaskDef<?, ?>> taskDefs = new HashSet<>();
{{#providedTaskDefs}}
        taskDefs.add({{name}});
{{/providedTaskDefs}}
        return taskDefs;
    }

    @Provides @LanguageScope @Named("language")
    TaskDefs provideTaskDefs(@Named("language") Set<TaskDef<?, ?>> taskDefs) {
        return new MapTaskDefs(taskDefs);
    }


    @Provides @LanguageScope
    LanguageInstance provideLanguageInstance({{genInstance.id}} instance) {
        return instance;
    }

    @Provides /* Unscoped: new session every call. */
    PieSession providePieSession(Pie pie, @Named("language") TaskDefs languageTaskDefs) {
        return pie.newSession(languageTaskDefs);
    }


    @Provides @LanguageScope @ElementsIntoSet
    static Set<CommandDef<?>> provideCommandDefsSet(
{{#providedCommandDefs}}
        {{variable}}{{^-last}},{{/-last}}
{{/providedCommandDefs}}
    ) {
        final HashSet<CommandDef<?>> commandDefs = new HashSet<>();
{{#providedCommandDefs}}
        commandDefs.add({{name}});
{{/providedCommandDefs}}
        return commandDefs;
    }

    @Provides @LanguageScope @ElementsIntoSet
    static Set<AutoCommandRequest<?>> provideAutoCommandRequestsSet(
{{#providedAutoCommandDefs}}
        {{value.commandDef.qualifiedId}} {{name}}{{^-last}},{{/-last}}
{{/providedAutoCommandDefs}}
    ) {
        final HashSet<AutoCommandRequest<?>> autoCommandDefs = new HashSet<>();
{{#providedAutoCommandDefs}}
        autoCommandDefs.add(AutoCommandRequest.of({{name}}, new RawArgs(MapView.of({{#value.initialArgs.entrySet}}new EntryView<>("{{getKey}}", {{getValue}}){{^-last}},{{/-last}}{{/value.initialArgs.entrySet}})){{#value.resourceTypes}}, HierarchicalResourceType.{{this}}{{/value.resourceTypes}}));
{{/providedAutoCommandDefs}}
        return autoCommandDefs;
    }
}
