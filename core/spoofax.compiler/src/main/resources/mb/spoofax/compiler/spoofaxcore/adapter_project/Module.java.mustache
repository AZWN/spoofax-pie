package {{genModule.packageId}};

import dagger.Module;
import dagger.Provides;
import dagger.multibindings.ElementsIntoSet;
import mb.common.result.Result;
import mb.jsglr1.common.JSGLR1ParseException;
import mb.log.api.LoggerFactory;
import mb.common.util.MapView;
import mb.common.util.EntryView;
import mb.common.message.Messages;
import mb.log.api.LoggerFactory;
import mb.pie.api.Function;
import mb.pie.api.MapTaskDefs;
import mb.pie.api.Pie;
import mb.pie.api.MixedSession;
import mb.pie.api.Supplier;
import mb.pie.api.TaskDef;
import mb.pie.api.TaskDefs;
import mb.resource.ResourceKeyString;
import mb.resource.ResourceService;
import mb.resource.classloader.ClassLoaderResource;
import mb.resource.classloader.ClassLoaderResourceRegistry;
import mb.resource.hierarchical.HierarchicalResource;
import mb.spoofax.core.language.LanguageInstance;
import mb.spoofax.core.language.LanguageScope;
import mb.spoofax.core.language.command.AutoCommandRequest;
import mb.spoofax.core.language.command.CommandDef;
import mb.spoofax.core.language.command.HierarchicalResourceType;
import mb.spoofax.core.language.command.arg.RawArgs;
import mb.spoofax.core.platform.Platform;
import mb.spoofax.core.pie.PieProvider;
import mb.spoofax.core.pie.DefaultPieProvider;
{{#isMultiLang}}
import mb.statix.multilang.metadata.AnalysisContextService;
import mb.statix.multilang.metadata.ContextDataManager;
import mb.statix.multilang.metadata.ContextPieManager;
import mb.statix.multilang.metadata.ImmutableLanguageMetadata;
import mb.statix.multilang.metadata.LanguageId;
import mb.statix.multilang.metadata.LanguageMetadata;
import mb.statix.multilang.metadata.LanguageMetadataManager;
import mb.statix.multilang.MultiLang;
import mb.statix.multilang.SharedPieProvider;
import mb.statix.multilang.metadata.SpecFragmentId;
import mb.statix.multilang.metadata.spec.SpecConfig;
import mb.statix.multilang.pie.SmlSolveProject;
import mb.statix.multilang.pie.SmlBuildSpec;
import mb.statix.multilang.pie.SmlInstantiateGlobalScope;
import mb.statix.multilang.pie.SmlPartialSolveFile;
import mb.statix.multilang.pie.SmlPartialSolveProject;
import mb.statix.multilang.pie.config.SmlBuildContextConfiguration;
import mb.statix.multilang.pie.config.SmlReadConfigYaml;
import mb.statix.multilang.utils.MetadataUtils;
{{/isMultiLang}}
import mb.stratego.common.StrategoRuntime;
import mb.stratego.common.StrategoRuntimeBuilder;
import org.spoofax.interpreter.terms.IStrategoTerm;
import org.spoofax.interpreter.terms.ITermFactory;

import javax.inject.Named;
import java.util.HashSet;
import java.util.Set;
import java.util.Map;

@Module
public class {{genModule.id}} {
    @Provides @LanguageScope
    static ClassLoaderResourceRegistry provideClassLoaderResourceRegistry() {
        return {{classloaderResources.languageProjectInput.classloaderResources.qualifiedId}}.createClassLoaderResourceRegistry();
    }

    @Provides @LanguageScope
    static ResourceService provideResourceRegistry(@Platform ResourceService resourceService, ClassLoaderResourceRegistry classLoaderResourceRegistry) {
        return resourceService.createChild(classLoaderResourceRegistry);
    }

    @Provides @Named("definition-dir") @LanguageScope
    static ClassLoaderResource provideDefinitionDir(ClassLoaderResourceRegistry registry) {
        return {{classloaderResources.languageProjectInput.classloaderResources.qualifiedId}}.createDefinitionDir(registry);
    }

    @Provides @Named("definition-dir") @LanguageScope
    static HierarchicalResource provideDefinitionDirAsHierarchicalResource(@Named("definition-dir") ClassLoaderResource definitionDir) {
        return definitionDir;
    }

{{#parser}}
    @Provides @LanguageScope
    static {{this.languageProjectInput.factory.qualifiedId}} provideParserFactory(@Named("definition-dir") HierarchicalResource definitionDir) {
        return new {{this.languageProjectInput.factory.qualifiedId}}(definitionDir);
    }

    @Provides /* Unscoped: parser has state, so create a new parser every call. */
    static {{this.languageProjectInput.parser.qualifiedId}} provideParser({{this.languageProjectInput.factory.qualifiedId}} parserFactory) {
        return parserFactory.create();
    }
{{/parser}}
{{#styler}}


    @Provides @LanguageScope
    static {{this.languageProjectInput.factory.qualifiedId}} provideStylerFactory(LoggerFactory loggerFactory, @Named("definition-dir") HierarchicalResource definitionDir) {
        return new {{this.languageProjectInput.factory.qualifiedId}}(loggerFactory, definitionDir);
    }

    @Provides @LanguageScope
    static {{this.languageProjectInput.styler.qualifiedId}} provideStyler({{this.languageProjectInput.factory.qualifiedId}} stylerFactory) {
        return stylerFactory.create();
    }
{{/styler}}
{{#strategoRuntime}}


    @Provides @LanguageScope
    static {{this.languageProjectInput.factory.qualifiedId}} provideStrategoRuntimeBuilderFactory(LoggerFactory loggerFactory, ResourceService resourceService, @Named("definition-dir") HierarchicalResource definitionDir) {
        return new {{this.languageProjectInput.factory.qualifiedId}}(loggerFactory, resourceService, definitionDir);
    }

    @Provides @LanguageScope
    static StrategoRuntimeBuilder provideStrategoRuntimeBuilder({{this.languageProjectInput.factory.qualifiedId}} factory) {
        return factory.create();
    }

    @Provides @LanguageScope @Named("prototype")
    static StrategoRuntime providePrototypeStrategoRuntime(StrategoRuntimeBuilder builder) {
        return builder.build();
    }

    @Provides /* Unscoped: new session every call. */
    static StrategoRuntime provideStrategoRuntime(StrategoRuntimeBuilder builder, @Named("prototype") StrategoRuntime prototype) {
        return builder.buildFromPrototype(prototype);
    }
{{/strategoRuntime}}
{{#constraintAnalyzer}}


    @Provides @LanguageScope
    static {{this.languageProjectInput.factory.qualifiedId}} provideConstraintAnalyzerFactory(LoggerFactory loggerFactory, ResourceService resourceService, StrategoRuntime prototypeStrategoRuntime) {
        return new {{this.languageProjectInput.factory.qualifiedId}}(loggerFactory, resourceService, prototypeStrategoRuntime);
    }

    @Provides @LanguageScope
    static {{this.languageProjectInput.constraintAnalyzer.qualifiedId}} provideConstraintAnalyzer({{this.languageProjectInput.factory.qualifiedId}} factory) {
        return factory.create();
    }
{{/constraintAnalyzer}}


    @Provides @LanguageScope @ElementsIntoSet
    static Set<TaskDef<?, ?>> provideTaskDefsSet(
{{#providedTaskDefs}}
        {{variable}}{{^-last}},{{/-last}}
{{/providedTaskDefs}}
    ) {
        final HashSet<TaskDef<?, ?>> taskDefs = new HashSet<>();
{{#providedTaskDefs}}
        taskDefs.add({{name}});
{{/providedTaskDefs}}
        return taskDefs;
    }

    @Provides @LanguageScope
    static TaskDefs provideTaskDefs(Set<TaskDef<?, ?>> taskDefs) {
        return new MapTaskDefs(taskDefs);
    }

    @Provides @LanguageScope @Named("prototype")
    static Pie providePie(@Platform Pie pie, TaskDefs taskDefs, ResourceService resourceService) {
        return pie.createChildBuilder().withTaskDefs(taskDefs).withResourceService(resourceService).build();
    }
    {{#multilangAnalyzer}}
    @Provides @LanguageScope
    static LanguageId provideLanguageId() {
        return new LanguageId("{{languageId}}");
    }
    @Provides @LanguageScope
    static PieProvider providePieProvider(SharedPieProvider provider) {
        return provider;
    }
    {{/multilangAnalyzer}}
    {{^multilangAnalyzer}}
    @Provides @LanguageScope
    static PieProvider providePieProvider(DefaultPieProvider provider) {
        return provider;
    }
    {{/multilangAnalyzer}}

    @Provides @LanguageScope
    static LanguageInstance provideLanguageInstance({{genInstance.id}} instance) {
        return instance;
    }


    @Provides @LanguageScope @ElementsIntoSet
    static Set<CommandDef<?>> provideCommandDefsSet(
{{#providedCommandDefs}}
        {{variable}}{{^-last}},{{/-last}}
{{/providedCommandDefs}}
    ) {
        final HashSet<CommandDef<?>> commandDefs = new HashSet<>();
{{#providedCommandDefs}}
        commandDefs.add({{name}});
{{/providedCommandDefs}}
        return commandDefs;
    }

    @Provides @LanguageScope @ElementsIntoSet
    static Set<AutoCommandRequest<?>> provideAutoCommandRequestsSet(
{{#providedAutoCommandDefs}}
        {{value.commandDef.qualifiedId}} {{name}}{{^-last}},{{/-last}}
{{/providedAutoCommandDefs}}
    ) {
        final HashSet<AutoCommandRequest<?>> autoCommandDefs = new HashSet<>();
{{#providedAutoCommandDefs}}
        autoCommandDefs.add(AutoCommandRequest.of({{name}}, new RawArgs(MapView.of({{#value.initialArgs.entrySet}}new EntryView<>("{{getKey}}", {{getValue}}){{^-last}},{{/-last}}{{/value.initialArgs.entrySet}})){{#value.resourceTypes}}, HierarchicalResourceType.{{this}}{{/value.resourceTypes}}));
{{/providedAutoCommandDefs}}
        return autoCommandDefs;
    }
{{#isMultiLang}}
    @Provides @LanguageScope
    static SmlBuildSpec provideBuildSpec(@MultiLang SmlBuildSpec buildSpec) {
        return buildSpec;
    }

    @Provides @LanguageScope
    static SmlPartialSolveFile providePartialSolveFile(@MultiLang SmlPartialSolveFile partialSolveFile) {
        return partialSolveFile;
    }

    @Provides @LanguageScope
    static SmlPartialSolveProject providePartialSolveProject(@MultiLang SmlPartialSolveProject partialSolveProject) {
        return partialSolveProject;
    }

    @Provides @LanguageScope
    static SmlInstantiateGlobalScope provideInstantiateGlobalScope(@MultiLang SmlInstantiateGlobalScope instantiateGlobalScope) {
        return instantiateGlobalScope;
    }

    @Provides @LanguageScope
    static SmlBuildContextConfiguration provideBuildContextConfiguration(@MultiLang SmlBuildContextConfiguration buildContextConfiguration) {
        return buildContextConfiguration;
    }

    @Provides @LanguageScope
    static SmlSolveProject provideSolveProject(@MultiLang SmlSolveProject solveProject) {
        return solveProject;
    }

    @Provides @LanguageScope
    static SmlReadConfigYaml provideReadConfigYaml(@MultiLang SmlReadConfigYaml readConfigYaml) {
        return readConfigYaml;
    }

    @Provides @LanguageScope
    static AnalysisContextService getAnalysisContextService(@MultiLang AnalysisContextService analysisContextService) {
        return analysisContextService;
    }

    @Provides @LanguageScope
    static LanguageMetadataManager provideLanguageMetadataManager(@MultiLang AnalysisContextService analysisContextService) {
        return analysisContextService;
    }

    @Provides @LanguageScope
    static ContextPieManager provideContextPieManager(@MultiLang AnalysisContextService analysisContextService) {
        return analysisContextService;
    }

    @Provides @LanguageScope
    static ContextDataManager provideContextDataManager(@MultiLang AnalysisContextService analysisContextService) {
        return analysisContextService;
    }

    {{#parser}}
    @Provides @LanguageScope
    static Function<Supplier<String>, Result<IStrategoTerm, JSGLR1ParseException>> provideParseFunction({{parseTaskDef.qualifiedId}} parse) {
        return parse.createAstFunction();
    }

    @Provides @LanguageScope
    static Function<Supplier<String>, Messages> provideParseMessagesFunction({{parseTaskDef.qualifiedId}} parse) {
        return parse.createMessagesFunction();
    }
    {{/parser}}

    {{#multilangAnalyzer}}
    @Provides @LanguageScope
    static LanguageMetadata getLanguageMetadata(
        @Named("prototype") StrategoRuntime strategoRuntime,
        @Named("definition-dir") ClassLoaderResource definitionDir,
        {{preStatixTaskDef.qualifiedId}} preStatix,
        {{postStatixTaskDef.qualifiedId}} postStatix,
        {{indexAstTaskDef.qualifiedId}} indexAst,
        @Named("prototype") Pie languagePie
    ) {
        ITermFactory termFactory = strategoRuntime.getTermFactory();
        return ImmutableLanguageMetadata.builder()
            .resourcesSupplier(MetadataUtils.resourcesSupplierForExtensions({{#shared.fileExtensions}}"{{this}}"{{^-last}}, {{/-last}}{{/shared.fileExtensions}}))
            .astFunction(preStatix.createFunction().mapInput(indexAst::createSupplier))
            .postTransform(postStatix.createFunction())
            .languageId(new LanguageId("{{languageId}}"))
            .languagePie(languagePie)
            .termFactory(termFactory)
            .fileConstraint("{{fileConstraint}}")
            .projectConstraint("{{projectConstraint}}")
            .build();
    }

    @Provides @LanguageScope
    static Map<SpecFragmentId, SpecConfig> getSpecConfig(@Named("prototype") StrategoRuntime strategoRuntime) {
        return {{languageProjectInput.specConfigFactory.qualifiedId}}.getSpecConfigs(strategoRuntime.getTermFactory());
    }
    {{/multilangAnalyzer}}
{{/isMultiLang}}
}
