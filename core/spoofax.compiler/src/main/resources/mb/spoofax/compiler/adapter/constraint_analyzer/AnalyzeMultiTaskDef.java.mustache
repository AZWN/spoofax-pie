package {{genAnalyzeMultiTaskDef.packageId}};

import mb.constraint.common.ConstraintAnalyzer.MultiFileResult;
import mb.constraint.common.ConstraintAnalyzerContext;
import mb.constraint.common.ConstraintAnalyzerException;
import mb.constraint.pie.ConstraintAnalyzeMultiTaskDef;
import mb.resource.ResourceKey;
import org.spoofax.interpreter.terms.IStrategoTerm;

import javax.inject.Inject;
import java.util.HashMap;

@{{adapterProject.scope.qualifiedId}}
public class {{genAnalyzeMultiTaskDef.id}} extends ConstraintAnalyzeMultiTaskDef {
    private final {{languageProjectInput.constraintAnalyzer.qualifiedId}} constraintAnalyzer;

    @Inject
    public {{genAnalyzeMultiTaskDef.id}}({{languageProjectInput.constraintAnalyzer.qualifiedId}} constraintAnalyzer) {
        this.constraintAnalyzer = constraintAnalyzer;
    }

    @Override
    public String getId() {
        return "{{genAnalyzeMultiTaskDef.qualifiedId}}";
    }

    @Override
    protected MultiFileResult analyze(ResourceKey root, HashMap<ResourceKey, IStrategoTerm> asts, ConstraintAnalyzerContext context) throws ConstraintAnalyzerException {
        return constraintAnalyzer.analyze(root, asts, context);
    }
}
